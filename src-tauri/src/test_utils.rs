#[cfg(test)]
use std::path::{Path, PathBuf};
use tempfile::TempDir;
use std::fs;

/// Creates a temporary directory for testing
pub fn create_temp_dir() -> TempDir {
    tempfile::tempdir().expect("Failed to create temp directory")
}

/// Creates a minimal valid JPEG file for testing
pub fn create_test_jpeg(dir: &Path, filename: &str) -> PathBuf {
    let file_path = dir.join(filename);

    // Minimal valid JPEG file (1x1 pixel, black)
    let jpeg_data = vec![
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
        0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
        0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
        0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
        0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
        0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
        0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
        0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
        0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
        0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C,
        0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x00, 0xFF, 0xD9
    ];

    fs::write(&file_path, jpeg_data).expect("Failed to create test JPEG");
    file_path
}

/// Creates a minimal valid PNG file for testing
pub fn create_test_png(dir: &Path, filename: &str) -> PathBuf {
    let file_path = dir.join(filename);

    // Minimal valid PNG file (1x1 pixel, transparent)
    let png_data = vec![
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4, 0x89, 0x00, 0x00, 0x00,
        0x0A, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0x63, 0x00, 0x01, 0x00, 0x00,
        0x05, 0x00, 0x01, 0x0D, 0x0A, 0x2D, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
    ];

    fs::write(&file_path, png_data).expect("Failed to create test PNG");
    file_path
}

/// Creates a minimal valid WebP file for testing
pub fn create_test_webp(dir: &Path, filename: &str) -> PathBuf {
    let file_path = dir.join(filename);

    // Minimal valid WebP file (1x1 pixel)
    let webp_data = vec![
        0x52, 0x49, 0x46, 0x46, 0x1A, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50,
        0x56, 0x50, 0x38, 0x20, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];

    fs::write(&file_path, webp_data).expect("Failed to create test WebP");
    file_path
}

/// Creates a minimal valid GIF file for testing
pub fn create_test_gif(dir: &Path, filename: &str) -> PathBuf {
    let file_path = dir.join(filename);

    // Minimal valid GIF file (1x1 pixel, black)
    let gif_data = vec![
        0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x21, 0xF9, 0x04, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x00, 0x02, 0x02, 0x04, 0x01, 0x00, 0x3B
    ];

    fs::write(&file_path, gif_data).expect("Failed to create test GIF");
    file_path
}

/// Creates an invalid image file for testing
pub fn create_invalid_image(dir: &Path, filename: &str) -> PathBuf {
    let file_path = dir.join(filename);
    fs::write(&file_path, b"invalid image data").expect("Failed to create invalid image");
    file_path
}

/// Creates a text file with image extension for testing
pub fn create_fake_image(dir: &Path, filename: &str) -> PathBuf {
    let file_path = dir.join(filename);
    fs::write(&file_path, b"This is not an image").expect("Failed to create fake image");
    file_path
}

/// Sets up a test environment variable
pub fn setup_test_env_var(key: &str, value: &str) -> String {
    let original = std::env::var(key).unwrap_or_default();
    std::env::set_var(key, value);
    original
}

/// Restores an environment variable
pub fn restore_env_var(key: &str, original: &str) {
    if original.is_empty() {
        std::env::remove_var(key);
    } else {
        std::env::set_var(key, original);
    }
}